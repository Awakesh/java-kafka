/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package co.lemnisk.common.avro.model.event.dmpnba;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Context extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6086669520607042620L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Context\",\"namespace\":\"co.lemnisk.common.avro.model.event.dmpnba\",\"fields\":[{\"name\":\"srcId\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"writeKey\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"accountId\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"server_ts\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"otherIds\",\"type\":{\"type\":\"map\",\"values\":[\"null\",\"int\",\"string\",\"boolean\"],\"default\":{}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Context> ENCODER =
      new BinaryMessageEncoder<Context>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Context> DECODER =
      new BinaryMessageDecoder<Context>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Context> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Context> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Context>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Context to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Context from a ByteBuffer. */
  public static Context fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence srcId;
  @Deprecated public java.lang.CharSequence writeKey;
  @Deprecated public java.lang.CharSequence accountId;
  @Deprecated public java.lang.CharSequence server_ts;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Object> otherIds;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Context() {}

  /**
   * All-args constructor.
   * @param srcId The new value for srcId
   * @param writeKey The new value for writeKey
   * @param accountId The new value for accountId
   * @param server_ts The new value for server_ts
   * @param otherIds The new value for otherIds
   */
  public Context(java.lang.CharSequence srcId, java.lang.CharSequence writeKey, java.lang.CharSequence accountId, java.lang.CharSequence server_ts, java.util.Map<java.lang.CharSequence,java.lang.Object> otherIds) {
    this.srcId = srcId;
    this.writeKey = writeKey;
    this.accountId = accountId;
    this.server_ts = server_ts;
    this.otherIds = otherIds;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return srcId;
    case 1: return writeKey;
    case 2: return accountId;
    case 3: return server_ts;
    case 4: return otherIds;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: srcId = (java.lang.CharSequence)value$; break;
    case 1: writeKey = (java.lang.CharSequence)value$; break;
    case 2: accountId = (java.lang.CharSequence)value$; break;
    case 3: server_ts = (java.lang.CharSequence)value$; break;
    case 4: otherIds = (java.util.Map<java.lang.CharSequence,java.lang.Object>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'srcId' field.
   * @return The value of the 'srcId' field.
   */
  public java.lang.CharSequence getSrcId() {
    return srcId;
  }

  /**
   * Sets the value of the 'srcId' field.
   * @param value the value to set.
   */
  public void setSrcId(java.lang.CharSequence value) {
    this.srcId = value;
  }

  /**
   * Gets the value of the 'writeKey' field.
   * @return The value of the 'writeKey' field.
   */
  public java.lang.CharSequence getWriteKey() {
    return writeKey;
  }

  /**
   * Sets the value of the 'writeKey' field.
   * @param value the value to set.
   */
  public void setWriteKey(java.lang.CharSequence value) {
    this.writeKey = value;
  }

  /**
   * Gets the value of the 'accountId' field.
   * @return The value of the 'accountId' field.
   */
  public java.lang.CharSequence getAccountId() {
    return accountId;
  }

  /**
   * Sets the value of the 'accountId' field.
   * @param value the value to set.
   */
  public void setAccountId(java.lang.CharSequence value) {
    this.accountId = value;
  }

  /**
   * Gets the value of the 'server_ts' field.
   * @return The value of the 'server_ts' field.
   */
  public java.lang.CharSequence getServerTs() {
    return server_ts;
  }

  /**
   * Sets the value of the 'server_ts' field.
   * @param value the value to set.
   */
  public void setServerTs(java.lang.CharSequence value) {
    this.server_ts = value;
  }

  /**
   * Gets the value of the 'otherIds' field.
   * @return The value of the 'otherIds' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Object> getOtherIds() {
    return otherIds;
  }

  /**
   * Sets the value of the 'otherIds' field.
   * @param value the value to set.
   */
  public void setOtherIds(java.util.Map<java.lang.CharSequence,java.lang.Object> value) {
    this.otherIds = value;
  }

  /**
   * Creates a new Context RecordBuilder.
   * @return A new Context RecordBuilder
   */
  public static co.lemnisk.common.avro.model.event.dmpnba.Context.Builder newBuilder() {
    return new co.lemnisk.common.avro.model.event.dmpnba.Context.Builder();
  }

  /**
   * Creates a new Context RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Context RecordBuilder
   */
  public static co.lemnisk.common.avro.model.event.dmpnba.Context.Builder newBuilder(co.lemnisk.common.avro.model.event.dmpnba.Context.Builder other) {
    return new co.lemnisk.common.avro.model.event.dmpnba.Context.Builder(other);
  }

  /**
   * Creates a new Context RecordBuilder by copying an existing Context instance.
   * @param other The existing instance to copy.
   * @return A new Context RecordBuilder
   */
  public static co.lemnisk.common.avro.model.event.dmpnba.Context.Builder newBuilder(co.lemnisk.common.avro.model.event.dmpnba.Context other) {
    return new co.lemnisk.common.avro.model.event.dmpnba.Context.Builder(other);
  }

  /**
   * RecordBuilder for Context instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Context>
    implements org.apache.avro.data.RecordBuilder<Context> {

    private java.lang.CharSequence srcId;
    private java.lang.CharSequence writeKey;
    private java.lang.CharSequence accountId;
    private java.lang.CharSequence server_ts;
    private java.util.Map<java.lang.CharSequence,java.lang.Object> otherIds;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(co.lemnisk.common.avro.model.event.dmpnba.Context.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.srcId)) {
        this.srcId = data().deepCopy(fields()[0].schema(), other.srcId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.writeKey)) {
        this.writeKey = data().deepCopy(fields()[1].schema(), other.writeKey);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountId)) {
        this.accountId = data().deepCopy(fields()[2].schema(), other.accountId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.server_ts)) {
        this.server_ts = data().deepCopy(fields()[3].schema(), other.server_ts);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.otherIds)) {
        this.otherIds = data().deepCopy(fields()[4].schema(), other.otherIds);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Context instance
     * @param other The existing instance to copy.
     */
    private Builder(co.lemnisk.common.avro.model.event.dmpnba.Context other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.srcId)) {
        this.srcId = data().deepCopy(fields()[0].schema(), other.srcId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.writeKey)) {
        this.writeKey = data().deepCopy(fields()[1].schema(), other.writeKey);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountId)) {
        this.accountId = data().deepCopy(fields()[2].schema(), other.accountId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.server_ts)) {
        this.server_ts = data().deepCopy(fields()[3].schema(), other.server_ts);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.otherIds)) {
        this.otherIds = data().deepCopy(fields()[4].schema(), other.otherIds);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'srcId' field.
      * @return The value.
      */
    public java.lang.CharSequence getSrcId() {
      return srcId;
    }

    /**
      * Sets the value of the 'srcId' field.
      * @param value The value of 'srcId'.
      * @return This builder.
      */
    public co.lemnisk.common.avro.model.event.dmpnba.Context.Builder setSrcId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.srcId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'srcId' field has been set.
      * @return True if the 'srcId' field has been set, false otherwise.
      */
    public boolean hasSrcId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'srcId' field.
      * @return This builder.
      */
    public co.lemnisk.common.avro.model.event.dmpnba.Context.Builder clearSrcId() {
      srcId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'writeKey' field.
      * @return The value.
      */
    public java.lang.CharSequence getWriteKey() {
      return writeKey;
    }

    /**
      * Sets the value of the 'writeKey' field.
      * @param value The value of 'writeKey'.
      * @return This builder.
      */
    public co.lemnisk.common.avro.model.event.dmpnba.Context.Builder setWriteKey(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.writeKey = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'writeKey' field has been set.
      * @return True if the 'writeKey' field has been set, false otherwise.
      */
    public boolean hasWriteKey() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'writeKey' field.
      * @return This builder.
      */
    public co.lemnisk.common.avro.model.event.dmpnba.Context.Builder clearWriteKey() {
      writeKey = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountId' field.
      * @return The value.
      */
    public java.lang.CharSequence getAccountId() {
      return accountId;
    }

    /**
      * Sets the value of the 'accountId' field.
      * @param value The value of 'accountId'.
      * @return This builder.
      */
    public co.lemnisk.common.avro.model.event.dmpnba.Context.Builder setAccountId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.accountId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'accountId' field has been set.
      * @return True if the 'accountId' field has been set, false otherwise.
      */
    public boolean hasAccountId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'accountId' field.
      * @return This builder.
      */
    public co.lemnisk.common.avro.model.event.dmpnba.Context.Builder clearAccountId() {
      accountId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'server_ts' field.
      * @return The value.
      */
    public java.lang.CharSequence getServerTs() {
      return server_ts;
    }

    /**
      * Sets the value of the 'server_ts' field.
      * @param value The value of 'server_ts'.
      * @return This builder.
      */
    public co.lemnisk.common.avro.model.event.dmpnba.Context.Builder setServerTs(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.server_ts = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'server_ts' field has been set.
      * @return True if the 'server_ts' field has been set, false otherwise.
      */
    public boolean hasServerTs() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'server_ts' field.
      * @return This builder.
      */
    public co.lemnisk.common.avro.model.event.dmpnba.Context.Builder clearServerTs() {
      server_ts = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'otherIds' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Object> getOtherIds() {
      return otherIds;
    }

    /**
      * Sets the value of the 'otherIds' field.
      * @param value The value of 'otherIds'.
      * @return This builder.
      */
    public co.lemnisk.common.avro.model.event.dmpnba.Context.Builder setOtherIds(java.util.Map<java.lang.CharSequence,java.lang.Object> value) {
      validate(fields()[4], value);
      this.otherIds = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'otherIds' field has been set.
      * @return True if the 'otherIds' field has been set, false otherwise.
      */
    public boolean hasOtherIds() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'otherIds' field.
      * @return This builder.
      */
    public co.lemnisk.common.avro.model.event.dmpnba.Context.Builder clearOtherIds() {
      otherIds = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Context build() {
      try {
        Context record = new Context();
        record.srcId = fieldSetFlags()[0] ? this.srcId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.writeKey = fieldSetFlags()[1] ? this.writeKey : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.accountId = fieldSetFlags()[2] ? this.accountId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.server_ts = fieldSetFlags()[3] ? this.server_ts : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.otherIds = fieldSetFlags()[4] ? this.otherIds : (java.util.Map<java.lang.CharSequence,java.lang.Object>) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Context>
    WRITER$ = (org.apache.avro.io.DatumWriter<Context>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Context>
    READER$ = (org.apache.avro.io.DatumReader<Context>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
