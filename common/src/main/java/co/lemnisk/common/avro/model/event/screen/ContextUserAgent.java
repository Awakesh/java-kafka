/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package co.lemnisk.common.avro.model.event.screen;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ContextUserAgent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 332514981889131019L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ContextUserAgent\",\"namespace\":\"co.lemnisk.common.avro.model.event.screen\",\"fields\":[{\"name\":\"osType\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"osVersion\",\"type\":\"string\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ContextUserAgent> ENCODER =
      new BinaryMessageEncoder<ContextUserAgent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ContextUserAgent> DECODER =
      new BinaryMessageDecoder<ContextUserAgent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ContextUserAgent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ContextUserAgent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ContextUserAgent>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ContextUserAgent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ContextUserAgent from a ByteBuffer. */
  public static ContextUserAgent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence osType;
  @Deprecated public java.lang.CharSequence osVersion;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ContextUserAgent() {}

  /**
   * All-args constructor.
   * @param osType The new value for osType
   * @param osVersion The new value for osVersion
   */
  public ContextUserAgent(java.lang.CharSequence osType, java.lang.CharSequence osVersion) {
    this.osType = osType;
    this.osVersion = osVersion;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return osType;
    case 1: return osVersion;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: osType = (java.lang.CharSequence)value$; break;
    case 1: osVersion = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'osType' field.
   * @return The value of the 'osType' field.
   */
  public java.lang.CharSequence getOsType() {
    return osType;
  }

  /**
   * Sets the value of the 'osType' field.
   * @param value the value to set.
   */
  public void setOsType(java.lang.CharSequence value) {
    this.osType = value;
  }

  /**
   * Gets the value of the 'osVersion' field.
   * @return The value of the 'osVersion' field.
   */
  public java.lang.CharSequence getOsVersion() {
    return osVersion;
  }

  /**
   * Sets the value of the 'osVersion' field.
   * @param value the value to set.
   */
  public void setOsVersion(java.lang.CharSequence value) {
    this.osVersion = value;
  }

  /**
   * Creates a new ContextUserAgent RecordBuilder.
   * @return A new ContextUserAgent RecordBuilder
   */
  public static co.lemnisk.common.avro.model.event.screen.ContextUserAgent.Builder newBuilder() {
    return new co.lemnisk.common.avro.model.event.screen.ContextUserAgent.Builder();
  }

  /**
   * Creates a new ContextUserAgent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ContextUserAgent RecordBuilder
   */
  public static co.lemnisk.common.avro.model.event.screen.ContextUserAgent.Builder newBuilder(co.lemnisk.common.avro.model.event.screen.ContextUserAgent.Builder other) {
    return new co.lemnisk.common.avro.model.event.screen.ContextUserAgent.Builder(other);
  }

  /**
   * Creates a new ContextUserAgent RecordBuilder by copying an existing ContextUserAgent instance.
   * @param other The existing instance to copy.
   * @return A new ContextUserAgent RecordBuilder
   */
  public static co.lemnisk.common.avro.model.event.screen.ContextUserAgent.Builder newBuilder(co.lemnisk.common.avro.model.event.screen.ContextUserAgent other) {
    return new co.lemnisk.common.avro.model.event.screen.ContextUserAgent.Builder(other);
  }

  /**
   * RecordBuilder for ContextUserAgent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ContextUserAgent>
    implements org.apache.avro.data.RecordBuilder<ContextUserAgent> {

    private java.lang.CharSequence osType;
    private java.lang.CharSequence osVersion;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(co.lemnisk.common.avro.model.event.screen.ContextUserAgent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.osType)) {
        this.osType = data().deepCopy(fields()[0].schema(), other.osType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.osVersion)) {
        this.osVersion = data().deepCopy(fields()[1].schema(), other.osVersion);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ContextUserAgent instance
     * @param other The existing instance to copy.
     */
    private Builder(co.lemnisk.common.avro.model.event.screen.ContextUserAgent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.osType)) {
        this.osType = data().deepCopy(fields()[0].schema(), other.osType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.osVersion)) {
        this.osVersion = data().deepCopy(fields()[1].schema(), other.osVersion);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'osType' field.
      * @return The value.
      */
    public java.lang.CharSequence getOsType() {
      return osType;
    }

    /**
      * Sets the value of the 'osType' field.
      * @param value The value of 'osType'.
      * @return This builder.
      */
    public co.lemnisk.common.avro.model.event.screen.ContextUserAgent.Builder setOsType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.osType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'osType' field has been set.
      * @return True if the 'osType' field has been set, false otherwise.
      */
    public boolean hasOsType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'osType' field.
      * @return This builder.
      */
    public co.lemnisk.common.avro.model.event.screen.ContextUserAgent.Builder clearOsType() {
      osType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'osVersion' field.
      * @return The value.
      */
    public java.lang.CharSequence getOsVersion() {
      return osVersion;
    }

    /**
      * Sets the value of the 'osVersion' field.
      * @param value The value of 'osVersion'.
      * @return This builder.
      */
    public co.lemnisk.common.avro.model.event.screen.ContextUserAgent.Builder setOsVersion(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.osVersion = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'osVersion' field has been set.
      * @return True if the 'osVersion' field has been set, false otherwise.
      */
    public boolean hasOsVersion() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'osVersion' field.
      * @return This builder.
      */
    public co.lemnisk.common.avro.model.event.screen.ContextUserAgent.Builder clearOsVersion() {
      osVersion = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ContextUserAgent build() {
      try {
        ContextUserAgent record = new ContextUserAgent();
        record.osType = fieldSetFlags()[0] ? this.osType : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.osVersion = fieldSetFlags()[1] ? this.osVersion : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ContextUserAgent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ContextUserAgent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ContextUserAgent>
    READER$ = (org.apache.avro.io.DatumReader<ContextUserAgent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
